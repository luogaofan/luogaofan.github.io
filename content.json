{"meta":{"title":"我的博客","subtitle":"","description":"","author":"地古nier","url":"https://luogaofan.github.io","root":"/"},"posts":[{"tags":[{"name":"ES6","slug":"ES6","permalink":"https://luogaofan.github.io/tags/ES6/"}],"title":"ES6 Promise 对象","date":"2019/12/11","text":"概述是异步编程的一种解决方案。从语法上说，Promise 是一个对象，从它可以获取异步操作的消息。 Promise 状态状态的特点Promise 异步操作有三种状态：pending（进行中）、fulfilled（已成功）和 rejected（已失败）。除了异步操作的结果，任何其他操作都无法改变这个状态。 Promise 对象只有：从 pending 变为 fulfilled 和从 pending 变为 rejected 的状态改变。只要处于 fulfilled 和 rejected ，状态就不会再变了即 resolved（已定型） const p1 &#x3D; new Promise(function(resolve,reject)&#123; resolve(&#39;success1&#39;); resolve(&#39;success2&#39;); &#125;); const p2 &#x3D; new Promise(function(resolve,reject)&#123; resolve(&#39;success3&#39;); reject(&#39;reject&#39;); &#125;); p1.then(function(value)&#123; console.log(value); &#x2F;&#x2F; success1 &#125;); p2.then(function(value)&#123; console.log(value); &#x2F;&#x2F; success3 &#125;); 状态的缺点无法取消 Promise ，一旦新建它就会立即执行，无法中途取消。 如果不设置回调函数，Promise 内部抛出的错误，不会反应到外部。 当处于 pending 状态时，无法得知目前进展到哪一个阶段（刚刚开始还是即将完成）。 then 方法then 方法接收两个函数作为参数，第一个参数是 Promise 执行成功时的回调，第二个参数是 Promise 执行失败时的回调，两个函数只会有一个被调用。 then 方法的特点在 JavaScript 事件队列的当前运行完成之前，回调函数永远不会被调用。 const p &#x3D; new Promise(function(resolve,reject)&#123; resolve(&#39;success&#39;); &#125;); p.then(function(value)&#123; console.log(value); &#125;); console.log(&#39;first&#39;); &#x2F;&#x2F; first &#x2F;&#x2F; success 通过 .then 形式添加的回调函数，不论什么时候，都会被调用。 通过多次调用 .then ，可以添加多个回调函数，它们会按照插入顺序并且独立运行。 const p &#x3D; new Promise(function(resolve,reject)&#123; resolve(1); &#125;).then(function(value)&#123; &#x2F;&#x2F; 第一个then &#x2F;&#x2F; 1 console.log(value); return value * 2; &#125;).then(function(value)&#123; &#x2F;&#x2F; 第二个then &#x2F;&#x2F; 2 console.log(value); &#125;).then(function(value)&#123; &#x2F;&#x2F; 第三个then &#x2F;&#x2F; undefined console.log(value); return Promise.resolve(&#39;resolve&#39;); &#125;).then(function(value)&#123; &#x2F;&#x2F; 第四个then &#x2F;&#x2F; resolve console.log(value); return Promise.reject(&#39;reject&#39;); &#125;).then(function(value)&#123; &#x2F;&#x2F; 第五个then &#x2F;&#x2F;reject:reject console.log(&#39;resolve:&#39; + value); &#125;, function(err) &#123; console.log(&#39;reject:&#39; + err); &#125;); then 方法将返回一个 resolved 或 rejected 状态的 Promise 对象用于链式调用，且 Promise 对象的值就是这个返回值。 then 方法注意点简便的 Promise 链式编程最好保持扁平化，不要嵌套 Promise。 注意总是返回或终止 Promise 链。 const p1 &#x3D; new Promise(function(resolve,reject)&#123; resolve(1); &#125;).then(function(result) &#123; p2(result).then(newResult &#x3D;&gt; p3(newResult)); &#125;).then(() &#x3D;&gt; p4()); 创建新 Promise 但忘记返回它时，对应链条被打破，导致 p4 会与 p2 和 p3 同时进行。 大多数浏览器中不能终止的 Promise 链里的 rejection，建议后面都跟上 .catch(error =&gt; console.log(error));","permalink":"https://luogaofan.github.io/2019/12/11/ES6-Promise-%E5%AF%B9%E8%B1%A1/","photos":[]},{"tags":[{"name":"Markdown","slug":"Markdown","permalink":"https://luogaofan.github.io/tags/Markdown/"}],"title":"如何写md格式的文档","date":"2019/12/11","text":"Markdown，他是一种纯文本格式的标记语言。通过简单的标记语法，它可以使普通文本内容具有一定的格式。下面就是一些编写格式： 一、标题标题其实和HTML中的h系列很像，想要设置为标题的文字前面加#来表示一个#是一级标题，二个#是二级标题，以此类推。支持六级标题。 注：标准语法一般在#后跟个空格再写文字， 示例： # 这是一级标题 ## 这是二级标题 ### 这是三级标题 #### 这是四级标题 ##### 这是五级标题 ###### 这是六级标题 效果如下： 这是一级标题这是二级标题这是三级标题这是四级标题这是五级标题这是六级标题二、字体-加粗 要加粗的文字左右分别用两个*号包起来 斜体 要倾斜的文字左右分别用一个*号或者用_包起来 斜体加粗 要倾斜和加粗的文字左右分别用三个*号包起来 删除线 要加删除线的文字左右分别用两个~~号包起来 示例： **这是加粗的文字** *这是倾斜的文字*&#96; ***这是斜体加粗的文字*** ~~这是加删除线的文字~~ 效果如下： 这是加粗的文字这是倾斜的文字`这是斜体加粗的文字这是加删除线的文字 三、引用在引用的文字前加&gt;即可。引用也可以嵌套，如加两个&gt;&gt;三个&gt;&gt;&gt;n个… 示例： &gt;这是引用的内容 &gt;&gt;这是引用的内容 &gt;&gt;&gt;这是引用的内容 效果如下: 这是引用的内容 这是引用的内容 这是引用的内容 四、分割线三个或者三个以上的 - 或者 * 都可以。 示例： --- *** 效果如下：可以看到，显示效果是一样的。 五、图片语法： ![图片alt](图片地址 &#39;&#39;图片title&#39;&#39;) 图片alt就是显示在图片下面的文字，相当于对图片内容的解释。 图片title是图片的标题，当鼠标移到图片上时显示的内容。title可加可不加 **上传本地图片直接拖进去 六、超链接语法： [超链接名](超链接地址 &quot;超链接title&quot;) title可加可不加 示例： [百度](http:&#x2F;&#x2F;baidu.com) 效果如下： 百度 七、列表无序列表 语法：无序列表用 - + * 任何一种都可以 - 列表内容 + 列表内容 * 列表内容 注意：- + * 跟内容之间都要有一个空格 效果如下： 列表内容 列表内容 列表内容 有序列表 语法：数字加点 1.列表内容 2.列表内容 3.列表内容 注意：序号跟内容之间要有空格 效果如下： 1.列表内容2.列表内容3.列表内容 列表嵌套上一级和下一级之间敲三个空格即可 一级无序列表内容 二级无序列表内容 二级无序列表内容 二级无序列表内容 八、表格语法： 表头|表头|表头 ---|:--:|---: 内容|内容|内容 内容|内容|内容 第二行分割表头和内容。 - 有一个就行，为了对齐，多加了几个 文字默认居左 -两边加：表示文字居中 -右边加：表示文字居右 注：原生的语法两边都要用 | 包起来。此处省略 示例： |表头|表头|表头| |---|:---:|---:| |第一行|第一行|第一行| |第二行|第二行|第二行| |第三行|第三行|第三行| 效果如下： 表头 表头 表头 第一行 第一行 第一行 第二行 第二行 第二行 第三行 第三行 第三行 九、代码语法：单行代码：代码之间分别用一个反引号包起来代码块：代码之间分别用三个反引号包起来，且两边的反引号单独占一行 &#96;代码内容&#96; 以上就是常用的格式.","permalink":"https://luogaofan.github.io/2019/12/11/%E5%A6%82%E4%BD%95%E5%86%99md%E6%A0%BC%E5%BC%8F%E7%9A%84%E6%96%87%E6%A1%A3/","photos":[]},{"tags":[],"title":"我的第一篇博客","date":"2019/12/10","text":"经常会突发奇想的计划着怎么怎么样，却在行动的时候虎头蛇尾了，很难坚持作下去。这或许是很多人都存在的问题。在别人博客上看到：“或许写博客是一个不错的方法”。通过博客，经常来记录一下自己的学习，问题，思路等等。在成长的路上留下自己的足迹，回首时可能是一道专属的风景吧。","permalink":"https://luogaofan.github.io/2019/12/10/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/","photos":["http://shanxi.gqt.org.cn/zyx/ftrq/200902/W020090616427153128814.jpg"]}]}